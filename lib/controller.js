// Generated by CoffeeScript 1.4.0
var Controller, EventEmitter, fs, path, yaml, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

path = require('path');

fs = require('fs');

yaml = require('js-yaml');

_ = require('underscore');

EventEmitter = require("events").EventEmitter;

Controller = (function(_super) {

  __extends(Controller, _super);

  function Controller(params, response) {
    this.params = params;
    this.response = response;
    this.action = __bind(this.action, this);

    this.actionName = this.params.scr;
    this.beforeFiltersChain = [];
    this.contentType = 'text/plain';
    this.actions = {};
  }

  Controller.prototype.beforeFilters = function() {
    var _this = this;
    this.beforeFilterStatus = true;
    _.each(this.beforeFiltersChain, function(options) {
      var all, except, only;
      all = options.type === 'all';
      only = options.type === 'only' && options.actions.indexOf(_this.actionName) !== -1;
      except = options.type === 'except' && options.actions.indexOf(_this.actionName) === -1;
      if (all || only || except) {
        return _this.excuteBeforeFilterSet(options.filters);
      }
    });
    return this.beforeFilterStatus;
  };

  Controller.prototype.excuteBeforeFilterSet = function(filters) {
    var _this = this;
    return _.each(filters, function(filter) {
      if (_this.beforeFilterStatus) {
        return _this[filter]();
      }
    });
  };

  Controller.prototype.action = function(actionName, callback) {
    this.actions[actionName] = callback;
    return this.on(actionName, callback);
  };

  Controller.prototype.callAction = function() {
    if (!this.beforeFilters()) {
      return;
    }
    return this.emit(this.actionName, this.params, this.response);
  };

  Controller.prototype.setBeforeFilters = function(options) {
    return this.beforeFiltersChain.push(options);
  };

  Controller.prototype.render = function(object) {
    this.beforeFilterStatus = false;
    this.response.set('Content-Type', this.contentType);
    if (typeof object === 'string') {
      this.response.body = object;
    } else {
      this.response.body = JSON.stringify(object);
    }
    return this.response.send();
  };

  return Controller;

})(EventEmitter);

module.exports = Controller;
